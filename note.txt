 =========== STEP 1 =============

# Create Virtual ENV.
- python3 -m venv env

# Activate the virtual environment:
- .\env\Scripts\activate

# create github repository
 - //
# run this command
- npx gitignore python 

# search this to chrome for gitignore
- https://www.toptal.com/developers/gitignore/api/python

# initialize github repository
- git init 
- git remote add origin https://github.com/kent0012/django-realstate.git
- git remote -v (to confirm)

# check requirements txt and install the requirements libraries
- pip install -r requirements.txt
- python.exe -m pip install --upgrade pip (if having an error)

# confirm dependencies installed

- pip list

#create django project

- django-admin startproject real_state .

# Custom gitgnore file add it to git ignore file
.vscode
.idea
.coverage
.DS_Store
staticfiles
mediafiles
client/node_modules

# create setup.cfg file under main DR
- configure flake 8

# create .env file under main DR
- configure .env
- go to settings find the SECRET_KEY AND DEBUG=true and copy to .env file

# configure settings.python

- //

# create a folder apps under the main DR and run this command

- python manage.py startapp users
- python manage.py startapp profiles
- python manage.py startapp common
- python manage.py startapp users ratings

- open each app then rename it with app.users, apps.profiles, apps.common, apps.ratings
- then move each folder to the (apps) folder

# configure again the settings
- after configure
- python manage.py runserver


 =========== STEP 2 =============

 # create new folder DR under realstate app to have a (PRODUCTION & STAGING)

 - create __init__.py file
 - base.py
 - developement.py
 - production.py
 - copy and paste settings.py and paste it to base.py
 - delete settings.py
 - cut DATABASES in the base.py and and paste it development.py
 - configure all base.py, developement.py, and production.py

 # create database in PG ADMIN

 - go to base.py change the 
 - configure base.py STATIC_URL
 
 # change os DR
 - from real_state.settings real_state.settings.developement
 - do the same within the manage.py
 - configure urls.py

  =========== STEP 3 =============

  
  # Configure logging

  - configure it on the base.py at the bottom
  - create logs DR under main main DR
  - python manage.py runserver
  - open not found file to test loggers in terminal and check the folder logs, that store the error logs
  - delete db.sqlite

  =========== STEP 3 =============

  # create a custom user model 

  - 2 types to custom user model
  - Abstract User (when you want to update exisitng user model in django)
  - Abstract Base User (When you want to customize full user model)

  # Abstract Base User
  - navigate to apps/users/test.py || rename it to managers.py
  - configure managers.py
  - configure models.py for users Model
  - register model int the real_state/settings.py (AUTH_USER_MODEL = 'users.User')
  - configure admin.py in the users
  - python manage.py runserver // check first ther is an error occured.
  - python manage.py makemigrations
  - python manage.py migrate


=========== STEP 4 =============

   # Pseudo Primary 
   - go to apps/common/models.py  || configure it
   - go to profiles Models and add profile models
   - create a signals.py and configure it
   - go to apps.py 
      def ready(self):
        from apps.profiles import signals
  - go to profiles admin.py create a ProfileAdmin class
  - python manage.py runserver // check any error occured
  - python manage.py makemigrations
  - python manage.py migrate
  - python manage.py createsuperuser
  - python manage.py runserver login admin
